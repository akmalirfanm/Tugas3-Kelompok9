//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/Scripts/Module/Scene/Gameplay/Input/InputActionMap/InputActionManager.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @InputActionManager : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @InputActionManager()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""InputActionManager"",
    ""maps"": [
        {
            ""name"": ""Game"",
            ""id"": ""b8b7af50-890f-422d-a31f-c7828d2ea7c1"",
            ""actions"": [
                {
                    ""name"": ""Kanan"",
                    ""type"": ""Button"",
                    ""id"": ""f2c9ebae-3e39-4b34-899d-cdb0c1709bbe"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press(pressPoint=1.401298E-45,behavior=2)"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Kiri"",
                    ""type"": ""Button"",
                    ""id"": ""0afd9bf8-e17e-4408-9a87-2884c7171394"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Tembak"",
                    ""type"": ""Button"",
                    ""id"": ""228e558d-35f3-4ae4-be72-dcee802c66ce"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""0084e3c1-b728-497a-9a27-86ffde994fe9"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": ""Press(behavior=2)"",
                    ""processors"": """",
                    ""groups"": ""KB"",
                    ""action"": ""Kanan"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c9fcf93e-1224-4d48-849a-565da6198608"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Kiri"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8eea436c-30b3-4a71-896a-b784fc892abc"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Tembak"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""UI"",
            ""id"": ""8b69288e-795b-4ce9-8374-74a7e0ad9ea9"",
            ""actions"": [
                {
                    ""name"": ""Tembak"",
                    ""type"": ""Button"",
                    ""id"": ""b5e4b6d5-e9ad-404a-af33-737522214932"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""c9f60686-d803-43f8-b4f0-882d193aa6fa"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Tembak"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""KB"",
            ""bindingGroup"": ""KB"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // Game
        m_Game = asset.FindActionMap("Game", throwIfNotFound: true);
        m_Game_Kanan = m_Game.FindAction("Kanan", throwIfNotFound: true);
        m_Game_Kiri = m_Game.FindAction("Kiri", throwIfNotFound: true);
        m_Game_Tembak = m_Game.FindAction("Tembak", throwIfNotFound: true);
        // UI
        m_UI = asset.FindActionMap("UI", throwIfNotFound: true);
        m_UI_Tembak = m_UI.FindAction("Tembak", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Game
    private readonly InputActionMap m_Game;
    private IGameActions m_GameActionsCallbackInterface;
    private readonly InputAction m_Game_Kanan;
    private readonly InputAction m_Game_Kiri;
    private readonly InputAction m_Game_Tembak;
    public struct GameActions
    {
        private @InputActionManager m_Wrapper;
        public GameActions(@InputActionManager wrapper) { m_Wrapper = wrapper; }
        public InputAction @Kanan => m_Wrapper.m_Game_Kanan;
        public InputAction @Kiri => m_Wrapper.m_Game_Kiri;
        public InputAction @Tembak => m_Wrapper.m_Game_Tembak;
        public InputActionMap Get() { return m_Wrapper.m_Game; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(GameActions set) { return set.Get(); }
        public void SetCallbacks(IGameActions instance)
        {
            if (m_Wrapper.m_GameActionsCallbackInterface != null)
            {
                @Kanan.started -= m_Wrapper.m_GameActionsCallbackInterface.OnKanan;
                @Kanan.performed -= m_Wrapper.m_GameActionsCallbackInterface.OnKanan;
                @Kanan.canceled -= m_Wrapper.m_GameActionsCallbackInterface.OnKanan;
                @Kiri.started -= m_Wrapper.m_GameActionsCallbackInterface.OnKiri;
                @Kiri.performed -= m_Wrapper.m_GameActionsCallbackInterface.OnKiri;
                @Kiri.canceled -= m_Wrapper.m_GameActionsCallbackInterface.OnKiri;
                @Tembak.started -= m_Wrapper.m_GameActionsCallbackInterface.OnTembak;
                @Tembak.performed -= m_Wrapper.m_GameActionsCallbackInterface.OnTembak;
                @Tembak.canceled -= m_Wrapper.m_GameActionsCallbackInterface.OnTembak;
            }
            m_Wrapper.m_GameActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Kanan.started += instance.OnKanan;
                @Kanan.performed += instance.OnKanan;
                @Kanan.canceled += instance.OnKanan;
                @Kiri.started += instance.OnKiri;
                @Kiri.performed += instance.OnKiri;
                @Kiri.canceled += instance.OnKiri;
                @Tembak.started += instance.OnTembak;
                @Tembak.performed += instance.OnTembak;
                @Tembak.canceled += instance.OnTembak;
            }
        }
    }
    public GameActions @Game => new GameActions(this);

    // UI
    private readonly InputActionMap m_UI;
    private IUIActions m_UIActionsCallbackInterface;
    private readonly InputAction m_UI_Tembak;
    public struct UIActions
    {
        private @InputActionManager m_Wrapper;
        public UIActions(@InputActionManager wrapper) { m_Wrapper = wrapper; }
        public InputAction @Tembak => m_Wrapper.m_UI_Tembak;
        public InputActionMap Get() { return m_Wrapper.m_UI; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(UIActions set) { return set.Get(); }
        public void SetCallbacks(IUIActions instance)
        {
            if (m_Wrapper.m_UIActionsCallbackInterface != null)
            {
                @Tembak.started -= m_Wrapper.m_UIActionsCallbackInterface.OnTembak;
                @Tembak.performed -= m_Wrapper.m_UIActionsCallbackInterface.OnTembak;
                @Tembak.canceled -= m_Wrapper.m_UIActionsCallbackInterface.OnTembak;
            }
            m_Wrapper.m_UIActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Tembak.started += instance.OnTembak;
                @Tembak.performed += instance.OnTembak;
                @Tembak.canceled += instance.OnTembak;
            }
        }
    }
    public UIActions @UI => new UIActions(this);
    private int m_KBSchemeIndex = -1;
    public InputControlScheme KBScheme
    {
        get
        {
            if (m_KBSchemeIndex == -1) m_KBSchemeIndex = asset.FindControlSchemeIndex("KB");
            return asset.controlSchemes[m_KBSchemeIndex];
        }
    }
    public interface IGameActions
    {
        void OnKanan(InputAction.CallbackContext context);
        void OnKiri(InputAction.CallbackContext context);
        void OnTembak(InputAction.CallbackContext context);
    }
    public interface IUIActions
    {
        void OnTembak(InputAction.CallbackContext context);
    }
}
